/**
 *	Twitter API Module 
 * 
 *	@author Marcel Pociot <m.pociot@gmail.com>
 */
// Dependencies
var helper	= require('/lib/helper'),
	hmac	= require('/lib/sha1');
// Private
// Consumer key from twitter
var consumerKey			= '',
// Consumer secret from twitter
	consumerSecret		= '',
// OAuth Request Token
	requestToken		= '',
// OAuth Request Token Secret
	requestTokenSecret	= '',
// OAuth Access Token
	accessToken			= '',
// OAuth Access Token Secret
	accessTokenSecret	= '',
// OAuth Verifier
	oauthVerifier		= '',
// Authorization window
	authWin				= null,
// Callback after successful authorization
	authCallback		= null,
// Items waiting in queue
	queue				= [],
// DOM PIN selector
	pinSelector			= " \
							document \
								.getElementsByTagName('code')[0] \
								.firstChild.data \
	",
// Access URLs from twitter
	urls				= {
	request_token:	'https://api.twitter.com/oauth/request_token',
	authorize:		'https://api.twitter.com/oauth/authorize',
	access_token:	'https://api.twitter.com/oauth/access_token'
};

// Public
exports.authCallback	= function(callback){
	authCallback	= callback;
};
/**
 * Setter and getter functions
 * due to a bug / Ti Restriction we don't use
 * set... or get... as function names
 */
exports.selectConsumerKey = function(_consumerKey) {
   consumerKey = _consumerKey;
   return consumerKey;
};
exports.consumerKey = function() {
   return consumerKey;
};

exports.selectConsumerSecret = function(_consumerSecret) {
   consumerSecret = _consumerSecret;
   return consumerSecret;
};
exports.consumerSecret = function() {
   return consumerSecret;
};

/**
 * sets the consumerKey and consumerSecret
 * 
 * @param _key		your consumerKey from twitter
 * @param _secret	your consumerSecret from twitter
 * @return void
 */
exports.credentials	= function(_key, _secret){
	consumerKey		= _key;
	consumerSecret	= _secret;
};

/**
 * Save the access token for later use
 * The access token gets stores as a property
 */
exports.saveAccessToken	= function() {
	var token	= {
		accessToken:		accessToken,
		accessTokenSecret:	accessTokenSecret
	};
	Ti.App.Properties.setString("twitterAccessToken",JSON.stringify(token));
};

/**
 * Select the saved access token
 */
exports.selectAccessToken	= function() {
	var token = JSON.parse( Ti.App.Properties.getString("twitterAccessToken") ) || {};
	if( typeof token.accessToken !== 'undefined' ){
		accessToken	= token.accessToken;
	}
	if( typeof token.accessTokenSecret !== 'undefined' ){
		accessTokenSecret	= token.accessTokenSecret;
	}
};

/**
 * Deletes the saved access token
 */
exports.deleteAccessToken	= function() {
	Ti.App.Properties.setString("twitterAccessToken",JSON.stringify({}));
};


/**
 * This function generates the unique oauth_none value
 * This gets generated by using the unique device id + timestamp
 * @return string
 */
exports.nonce	= function() {
	var hash	= Ti.Platform.id + '-' + (+new Date());
	return Ti.Utils.md5HexDigest(hash);
};

//////////////////////////////////////////
//	build[xxx] Functions
//////////////////////////////////////////

/**
 * Builds the OAuth base string
 * an assembled string that is signed using a signing key to create a signature.
 *
 * @param _parameters object/array containing all POST/GET parameters
 * @param _httpMethod "POST" or "GET"
 * @return string
 */
exports.buildBaseString	= function(_httpMethod, _url, _parameters){
	var baseString		= _httpMethod.toUpperCase() + '&' + helper.percentEncode(_url) + '&';
	var parameterString	= '';
	for( var key in _parameters) {
		var value	= _parameters[key];
		parameterString += helper.percentEncode(key) + '=' + helper.percentEncode(value) + '&';
	}
	parameterString	= parameterString.substr(0, (parameterString.length - 1 ));
	baseString += helper.percentEncode(parameterString);
	return baseString;
};

/**
 * Builds the OAuth signing key
 * the string used as the "secret key" to sign a request.
 * 
 * @param _secret the secret key to use
 * @return string
 */
exports.buildSigningKey	= function(_secret){
	return helper.percentEncode(consumerSecret) + '&' + helper.percentEncode(_secret);
};

/**
 * Builds the OAuth signature based on the hmac_sha1
 * encryption
 * 
 * @param _baseString string to encrypt
 * @param _signingKey key to use for encryption
 * @return string
 */
exports.buildSignature	= function(_baseString,_signingKey){
	return hmac.b64_hmac_sha1(_signingKey,_baseString);
};
/**
 * Builds the authorization header for the http request
 * 
 * @param _parameters object containing all POST/GET parameters
 * @return string to send as an Authorization header
 */
exports.buildAuthorizationHeader	= function(_parameters){
	var header	= 'OAuth ';
	for( var key in _parameters ){
		// Only use keys that start with "oauth_"
		if( key.indexOf("oauth_") == 0 ){
			var value = _parameters[key];
			header += key +'="'+helper.percentEncode(value)+'", ';
		}
	}
	header	= header.substr(0, (header.length-2) );
	return header;
};

/**
 * Builds the parameter object used for all requests
 * The _addon object gets added to the parameters object to
 * manipulate/add data
 * 
 * @param _addon object with additional parameters
 * @return array sorted alphabetically 
 */
exports.buildParameters	= function(_addon){
	var parameters	= helper.combine({
		oauth_consumer_key:			consumerKey,
		oauth_nonce:				this.nonce(),
		oauth_signature_method:		'HMAC-SHA1',
		oauth_timestamp:			helper.timestamp(),
		oauth_version:				'1.0'
	},_addon);
	return helper.sortObject(parameters);
};

/**
 * Iterates over all parameters and extracts the ones, not used for OAuth
 * @param _parameters array with parameters
 * @return array without "oauth_" parameters
 */
exports.buildPostParameters	= function(_parameters){
	var postParameters	= {};
	for( var key in _parameters ){
		if( key.indexOf("oauth_") !== 0 ){
			var value	= _parameters[key];
			postParameters[key]	= value;
		}
	}
	return postParameters;
};

/**
 * Uses PHPs "parse_str" function to create an array from twitters
 * API result
 * @param _result string from twitter API
 * @return array
 */
exports.parseResult		= function(_result){
	var returnArray = {};
	helper.parse_str(_result,returnArray);
	return returnArray;
};

//////////////////////////////////////////
//	Authorization / UI 
//////////////////////////////////////////
/**
 * Authorize a user
 * Opens a new modal window containing a webview with twitters authorize site
 */
exports.authorize		= function(_title){
	var title	= _title || 'Twitter';
	// Get the request token
	this.acquireRequestToken();
	authWin	= Ti.UI.createWindow({
		title: title,
		modal: true,
		fullscreen: true
	});
	var authURL	= urls.authorize + '?oauth_token='+requestToken;
	var webView	= Ti.UI.createWebView({
		url: authURL
	});
	// Add event to check for PIN code
	webView.addEventListener('load', this.checkPIN);
	authWin.add(webView);
	authWin.open();
};

/**
 * Eventlistener to check for the twitter pin
 * This is a "load" eventListener
 * @param e event 
 */
exports.checkPIN	= function(e){
	var webView		= e.source;
	var pin			= webView.evalJS(pinSelector);
	if( pin.length > 0 ){
		// Save pin
		oauthVerifier	= pin;
		authWin.close();
		exports.acquireAccessToken();
	};
};

/**
 * check authorization status
 * @return bool
 */
exports.isAuthorized	= function() {
	this.selectAccessToken();
	return (typeof accessToken === 'string' && accessToken !== '');
};

/**
 * Processes all actions left in the queue
 * @return void
 */
exports.processQueue	= function() {
    while ( (action = queue.shift() ) != null ){
    	this.send(action.httpMethod, action.url, action.parameters, action.callback);
    }

};
////////////////////////////
// HTTP Requests
///////////////////////////
/**
 * Receives the request token
 */
exports.acquireRequestToken	= function() {
	Ti.API.debug("-- acquireRequestToken");
	var parameters		= this.buildParameters({
		oauth_callback:				'oob'
	});
	this.sendRequest(	'POST',
						urls.request_token,
						parameters,
						'',
						function(result){
							requestToken			= result.oauth_token;
							requestTokenSecret		= result.oauth_token_secret;
						});
};
/**
 * Receives the access token
 */
exports.acquireAccessToken	= function() {
	Ti.API.debug("-- acquireAccessToken");
	var parameters		= this.buildParameters({
		oauth_verifier:		oauthVerifier,
		oauth_token: 		requestToken
	});
	this.sendRequest(	'POST',
						urls.access_token,
						parameters,
						requestTokenSecret,
						function(result){
							accessToken			= result.oauth_token;
							accessTokenSecret	= result.oauth_token_secret;
							
							if( typeof authCallback === 'function' ){
								authCallback.call(this,result);
							}
							this.processQueue();
						});
	// Reset verifier
	oauthVerifier	= '';
};
/**
 * sends a request after everything is authorized
 * @param _httpMethod "POST" or "GET"
 * @param _url API endpoint
 * @param _parameters Object/Array containing the additional API parameters
 * @param _callback function to call after successful execution
 */
exports.send			= function(_httpMethod, _url, _parameters, _callback){
	if( !this.isAuthorized() ){
		var action	= {};
		action.httpMethod	= _httpMethod;
		action.url			= _url;
		action.parameters	= _parameters;
		action.callback		= _callback;
		queue.push( action );
		return;
	}
	
	var parameters		= this.buildParameters(helper.combine(_parameters,{
		oauth_token: 		accessToken
	}));
	this.sendRequest(_httpMethod,
					 _url,
					 parameters,
					 accessTokenSecret,
					 _callback);
};

/**
 * Base function to send a OAuth request
 * 
 * @param _httpMethod "POST" or "GET"
 * @param _url the API endpoint to call
 * @param _parameters array containing all parameters to send
 * @param _tokenSecret secret to use for building the signing key
 * @param _callback function to execute with the result data
 * @param _postParameters all additional parameters to post
 * 
 * @return void
 */
exports.sendRequest	= function(_httpMethod, _url, _parameters, _tokenSecret, _callback){
	// Create the base string
	var baseString				= this.buildBaseString(_httpMethod, _url, _parameters);
	// Create the signing key
	var signingKey				= this.buildSigningKey(_tokenSecret);
	// Get HMAC-SHA1 signature from those two values
	var signature				= this.buildSignature(baseString, signingKey);
	// Append signature to parameters
	_parameters.oauth_signature	= signature;
	// Build Authorization header
	var header					= this.buildAuthorizationHeader(_parameters);
	// Extract post parameters
	var postParameters			= this.buildPostParameters(_parameters);
	// Create HTTP Client
	var xhr = Ti.Network.createHTTPClient();
	xhr.open(_httpMethod.toUpperCase(), _url, false );
	xhr.setRequestHeader('Authorization', header);
	xhr.send( postParameters || {} );
	// If everything's cool get the result and fire the callback
	if( xhr.status == 200 ){
		var result	= this.parseResult(xhr.responseText);
		if( typeof _callback === 'function' ){
			_callback.call(this, result);
		}
	} else {
		Ti.API.debug("Request failed with response: "+xhr.responseText);
	}
};