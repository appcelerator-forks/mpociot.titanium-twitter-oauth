function TwitterAPI(_consumerKey,_consumerSecret){
	
	/**
	 *	Twitter API Module 
	 * 
	 *	@author Marcel Pociot <m.pociot@gmail.com>
	 */
	// Dependencies
	var helperClass	= require('lib/helper').helper,
		hmacClass	= require('lib/sha1').hmacsha1;
	var helper		= new helperClass();
	var hmac		= new hmacClass();
	// Private
	// Consumer key from twitter
	var consumerKey			= _consumerKey,
	// Consumer secret from twitter
		consumerSecret		= _consumerSecret,
	// Should the API open the auth window automatically on a send request?
		autoAuthorize		= false,
	// Private var to determine if there's a current authorization view 
		isAuthorizing		= false,
	// OAuth Request Token
		requestToken		= '',
	// OAuth Request Token Secret
		requestTokenSecret	= '',
	// OAuth Access Token
		accessToken			= '',
	// OAuth Access Token Secret
		accessTokenSecret	= '',
	// OAuth Verifier
		oauthVerifier		= '',
	// Authorization window
		authWin				= null,
	// Callback after successful authorization
		authCallback		= null,
	// Callback after network error / offline state
		offlineCallback		= null,
	// Items waiting in queue
		queue				= [],
	// DOM PIN selector
		pinSelector			= " \
								document \
									.getElementsByTagName('code')[0] \
									.firstChild.data \
		",
	// Access URLs from twitter
		urls				= {
		request_token:	'https://api.twitter.com/oauth/request_token',
		authorize:		'https://api.twitter.com/oauth/authorize',
		access_token:	'https://api.twitter.com/oauth/access_token'
	};
	
	// Public
	this.authCallback	= function(_callback){
		if( typeof _callback === 'function' ){
			authCallback	= _callback;
		}
		return (typeof _callback === 'function');
	};
	// Set offline Callback
	this.offlineCallback	= function(_callback){
		if( typeof _callback === 'function' ){
			offlineCallback	= _callback;
		}
		return (typeof _callback === 'function');
	};
	// Set auto authorization
	this.autoAuthorize		= function(_autoAuthorize){
		if( typeof _autoAuthorize === 'boolean' ){
			autoAuthorize	= _autoAuthorize;
		}
		return (typeof _autoAuthorize === 'boolean');
	}
	/**
	 * Setter and getter functions
	 * due to a bug / Ti Restriction we don't use
	 * set... or get... as function names
	 */
	this.selectConsumerKey = function(_consumerKey) {
	   consumerKey = _consumerKey;
	   return consumerKey;
	};
	this.consumerKey = function() {
	   return consumerKey;
	};
	
	this.selectConsumerSecret = function(_consumerSecret) {
	   consumerSecret = _consumerSecret;
	   return consumerSecret;
	};
	this.consumerSecret = function() {
	   return consumerSecret;
	};
	
	/**
	 * sets the consumerKey and consumerSecret
	 * 
	 * @param _key		your consumerKey from twitter
	 * @param _secret	your consumerSecret from twitter
	 * @return void
	 */
	this.credentials	= function(_key, _secret){
		consumerKey		= _key;
		consumerSecret	= _secret;
	};
	
	/**
	 * Save the access token for later use
	 * The access token gets stores as a property
	 */
	this.saveAccessToken	= function() {
		var token	= {
			accessToken:		accessToken,
			accessTokenSecret:	accessTokenSecret
		};
		Ti.App.Properties.setString("twitterAccessToken",JSON.stringify(token));
	};
	
	/**
	 * Select the saved access token
	 */
	this.selectAccessToken	= function() {
		var token = JSON.parse( Ti.App.Properties.getString("twitterAccessToken") ) || {};
		if( typeof token.accessToken !== 'undefined' ){
			accessToken	= token.accessToken;
		}
		if( typeof token.accessTokenSecret !== 'undefined' ){
			accessTokenSecret	= token.accessTokenSecret;
		}
	};
	
	/**
	 * Deletes the saved access token
	 */
	this.deleteAccessToken	= function() {
		Ti.App.Properties.setString("twitterAccessToken",JSON.stringify({}));
	};
	
	
	/**
	 * This function generates the unique oauth_none value
	 * This gets generated by using the unique device id + timestamp
	 * @return string
	 */
	this.nonce	= function() {
		var hash	= Ti.Platform.id + '-' + (+new Date());
		return Ti.Utils.md5HexDigest(hash);
	};
	
	//////////////////////////////////////////
	//	build[xxx] Functions
	//////////////////////////////////////////
	
	/**
	 * Builds the OAuth base string
	 * an assembled string that is signed using a signing key to create a signature.
	 *
	 * @param _parameters object/array containing all POST/GET parameters
	 * @param _httpMethod "POST" or "GET"
	 * @return string
	 */
	this.buildBaseString	= function(_httpMethod, _url, _parameters){
		var baseString		= _httpMethod.toUpperCase() + '&' + helper.urlencode(_url) + '&';
		var parameterString	= '';
		for( var key in _parameters) {
			var value	= _parameters[key];
			parameterString += helper.urlencode(key) + '=' + helper.urlencode(value) + '&';
		}
		parameterString	= parameterString.substr(0, (parameterString.length - 1 ));
		baseString += helper.urlencode(parameterString);
		return baseString;
	};
	
	/**
	 * Builds the OAuth signing key
	 * the string used as the "secret key" to sign a request.
	 * 
	 * @param _secret the secret key to use
	 * @return string
	 */
	this.buildSigningKey	= function(_secret){
		return helper.urlencode(consumerSecret) + '&' + helper.urlencode(_secret);
	};
	
	/**
	 * Builds the OAuth signature based on the hmac_sha1
	 * encryption
	 * 
	 * @param _baseString string to encrypt
	 * @param _signingKey key to use for encryption
	 * @return string
	 */
	this.buildSignature	= function(_baseString,_signingKey){
		return hmac.b64_hmac_sha1(_signingKey,_baseString);
	};
	/**
	 * Builds the authorization header for the http request
	 * 
	 * @param _parameters object containing all POST/GET parameters
	 * @return string to send as an Authorization header
	 */
	this.buildAuthorizationHeader	= function(_parameters){
		var header	= 'OAuth ';
		for( var key in _parameters ){
			// Only use keys that start with "oauth_"
			if( key.indexOf("oauth_") == 0 ){
				var value = _parameters[key];
				header += key +'="'+helper.urlencode(value)+'", ';
			}
		}
		header	= header.substr(0, (header.length-2) );
		return header;
	};
	
	/**
	 * Builds the parameter object used for all requests
	 * The _addon object gets added to the parameters object to
	 * manipulate/add data
	 * 
	 * @param _addon object with additional parameters
	 * @return array sorted alphabetically 
	 */
	this.buildParameters	= function(_addon){
		var parameters	= helper.combine({
			oauth_consumer_key:			consumerKey,
			oauth_nonce:				this.nonce(),
			oauth_signature_method:		'HMAC-SHA1',
			oauth_timestamp:			helper.timestamp(),
			oauth_version:				'1.0'
		},_addon);
		return helper.sortObject(parameters);
	};
	
	/**
	 * Iterates over all parameters and extracts the ones, not used for OAuth
	 * @param _parameters array with parameters
	 * @return array without "oauth_" parameters
	 */
	this.buildPostParameters	= function(_parameters){
		var postParameters	= {};
		for( var key in _parameters ){
			if( key.indexOf("oauth_") !== 0 ){
				var value	= _parameters[key];
				postParameters[key]	= value;
			}
		}
		return postParameters;
	};
	
	/**
	 * Uses PHPs "parse_str" function to create an array from twitters
	 * API result
	 * @param _result string from twitter API
	 * @return array
	 */
	this.parseResult		= function(_result){
		var returnArray = {};
		helper.parse_str(_result,returnArray);
		return returnArray;
	};
	
	//////////////////////////////////////////
	//	Authorization / UI 
	//////////////////////////////////////////
	/**
	 * Authorize a user
	 * Opens a new modal window containing a webview with twitters authorize site
	 */
	this.authorize		= function(_title){
		if( Ti.Network.online && !isAuthorizing ){
			var title	= _title || 'Twitter';
			// Get the request token
			this.acquireRequestToken();
			if( Ti.Platform.osname !== 'android' ){
				var authWin	= Ti.UI.createWindow({
					title: title,
					top:0,
					modal: true,
					fullscreen: true
				});
				// iOS Cancel button
				var cancelButton	= Ti.UI.createButton({
					title: 'Close'
				});
				cancelButton.addEventListener('click',function(e){
					authWin.close();
					// Release memory
					authWin			= null;
					// Allow new authorizations
					isAuthorizing	= false;
				});
				authWin.leftNavButton	= cancelButton;
			} else {
				// Android specific window
				var authWin	= Ti.UI.createWindow({
					top:0
				});
			}
			var authURL	= urls.authorize + '?oauth_token='+requestToken;
			var webView	= Ti.UI.createWebView({
				url: authURL
			});
			// Add event to check for PIN code
			webView.addEventListener('load',function(object){
				return function(e){
					if( object.checkPIN(e) ){
						object.acquireAccessToken();
					}
				};
			}(this));
			authWin.add(webView);
			authWin.open();
			isAuthorizing	= true;
		} else {
			return false;
		}
	};
	
	/**
	 * Eventlistener to check for the twitter pin
	 * This is a "load" eventListener
	 * @param e event 
	 */
	this.checkPIN	= function(e){
		var webView		= e.source;
		var pin			= webView.evalJS(pinSelector);
		if( pin.length > 0 ){
			// Save pin
			isAuthorizing	= false;
			oauthVerifier	= pin;
			authWin.close();
			authWin		= null;
			return true;
		};
		return false;
	};
	
	/**
	 * check authorization status
	 * @return bool
	 */
	this.isAuthorized	= function() {
		this.selectAccessToken();
		return (typeof accessToken === 'string' && accessToken !== '');
	};
	
	/**
	 * Processes all actions left in the queue
	 * @return void
	 */
	this.processQueue	= function() {
	    while ( (action = queue.shift() ) != null ){
	    	this.send(action.httpMethod, action.url, action.parameters, action.callback);
	    }
	
	};
	////////////////////////////
	// HTTP Requests
	///////////////////////////
	/**
	 * Receives the request token
	 */
	this.acquireRequestToken	= function() {
		Ti.API.debug("-- acquireRequestToken");
		var parameters		= this.buildParameters({
			oauth_callback:				'oob'
		});
		this.sendRequest(	'POST',
							urls.request_token,
							parameters,
							'',
							function(result){
								requestToken			= result.oauth_token;
								requestTokenSecret		= result.oauth_token_secret;
							});
	};
	/**
	 * Receives the access token
	 */
	this.acquireAccessToken	= function() {
		Ti.API.debug("-- acquireAccessToken");
		var parameters		= this.buildParameters({
			oauth_verifier:		oauthVerifier,
			oauth_token: 		requestToken
		});
		this.sendRequest(	'POST',
							urls.access_token,
							parameters,
							requestTokenSecret,
							function(result){
								accessToken			= result.oauth_token;
								accessTokenSecret	= result.oauth_token_secret;
								
								if( typeof authCallback === 'function' ){
									authCallback.call(this,result);
								}
								this.processQueue();
							},function(result){
								if( typeof offlineCallback === 'function' ){
									offlineCallback.call(this,result);
								}
							});
		// Reset verifier
		oauthVerifier	= '';
	};
	/**
	 * sends a request after everything is authorized
	 * @param _httpMethod "POST" or "GET"
	 * @param _url API endpoint
	 * @param _parameters Object/Array containing the additional API parameters
	 * @param _callback function to call after successful execution
	 */
	this.send			= function(_httpMethod, _url, _parameters, _callback, _offlineCallback){
		if( !this.isAuthorized() ){
			// Push action to queue
			var action	= {};
			action.httpMethod	= _httpMethod;
			action.url			= _url;
			action.parameters	= _parameters;
			action.callback		= _callback;
			queue.push( action );
			// If auto authorization is set to true, try to authenticate the user now
			if( autoAuthorize === true ){
				this.authorize();
			}
			return false;
		}
		
		var parameters		= this.buildParameters(helper.combine(_parameters,{
			oauth_token: 		accessToken
		}));
		this.sendRequest(_httpMethod,
						 _url,
						 parameters,
						 accessTokenSecret,
						 _callback,
						 _offlineCallback);
	};
	
	/**
	 * Base function to send a OAuth request
	 * 
	 * @param _httpMethod "POST" or "GET"
	 * @param _url the API endpoint to call
	 * @param _parameters array containing all parameters to send
	 * @param _tokenSecret secret to use for building the signing key
	 * @param _callback function to execute with the result data
	 * @param _postParameters all additional parameters to post
	 * 
	 * @return void
	 */
	this.sendRequest	= function(_httpMethod, _url, _parameters, _tokenSecret, _callback, _offlineCallback){
		// Create the base string
		var baseString				= this.buildBaseString(_httpMethod, _url, _parameters);
		// Create the signing key
		var signingKey				= this.buildSigningKey(_tokenSecret);
		// Get HMAC-SHA1 signature from those two values
		var signature				= this.buildSignature(baseString, signingKey);
		// Append signature to parameters
		_parameters.oauth_signature	= signature;
		// Build Authorization header
		var header					= this.buildAuthorizationHeader(_parameters);
		// Extract post parameters
		var postParameters			= this.buildPostParameters(_parameters);
		// Create HTTP Client
		var xhr = Ti.Network.createHTTPClient();
		xhr.open(_httpMethod.toUpperCase(), _url, false );
		xhr.setRequestHeader('Authorization', header);
		xhr.send( postParameters || {} );
		if( typeof _offlineCallback === 'function' ){
			// Set custom error callback
			xhr.onerror	= _offlineCallback;
		} else {
			// Set global error callback
			if( typeof offlineCallback === 'function' ){
				xhr.onerror = offlineCallback;
			}
		}
		// If everything's cool get the result and fire the callback
		if( xhr.status == 200 ){
			var result	= this.parseResult(xhr.responseText);
			if( typeof _callback === 'function' ){
				if( _url.indexOf('.json') > 0 ){
					result = JSON.parse(xhr.responseText);
				}
				_callback.call(this, result);
			}
		} else {
			var result	= xhr.responseText;
			Ti.API.debug("Request failed with response: "+xhr.responseText);
			if( typeof _offlineCallback === 'function' ){
				// Set custom error callback
				_offlineCallback.call(this, result);
			} else {
				// Set global error callback
				if( typeof offlineCallback === 'function' ){
					offlineCallback.call(this, result);
				}
			}
		}
	};
};

exports.twitterAPI	= TwitterAPI;